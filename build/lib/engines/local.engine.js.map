{"version":3,"sources":["../../../src/lib/engines/local.engine.js"],"names":["connection","channel","ConnectionManager","LocalEngine","pluginAPI","log","getPluginLogger","info","listeners","subscriptions","send","routingKey","message","options","test","TypeError","length","listenFn","shift","result","content","push","listen","consumerTag","getServiceName","publish","forEach","subscribe","module","exports"],"mappings":";;;gCAmEA,aAAmC;AACjC,WAAO;AACLA,kBAAY,IADP;AAELC,eAAS;AAFJ,KAAP;AAID,G;;kBALcC,iB;;;;;;;AAnEf;;;;;;;AAOA,SAASC,WAAT,CAAsBC,SAAtB,EAAiC;AAC/B,QAAMC,MAAMD,UAAUE,eAAV,EAAZ;AACAD,MAAIE,IAAJ,CAAS,mBAAT;;AAEA,QAAMC,YAAY,EAAlB;AACA,QAAMC,gBAAgB,EAAtB;;AAEA,SAAO;AACLC;AAAA,mCACE,WAAOC,UAAP,EAAmBC,OAAnB,EAA4BC,UAAU,EAAtC,EAA6C;AAC3C,YAAK,OAAD,CAAUC,IAAV,CAAeH,UAAf,CAAJ,EAAgC;AAC9B,gBAAM,IAAII,SAAJ,CAAc,+CAAd,CAAN;AACD;AACD,YAAIP,UAAUG,UAAV,KAAyBH,UAAUG,UAAV,EAAsBK,MAAnD,EAA2D;AACzD;AACA,gBAAMC,WAAWT,UAAUG,UAAV,EAAsBO,KAAtB,EAAjB;AACA,cAAID,QAAJ,EAAc;AACZZ,gBAAIE,IAAJ,CAAU,mCAAkCI,UAAW,EAAvD;AACA,kBAAMQ,SAASF,SAAS,EAAEG,SAASR,OAAX,EAAT,CAAf;AACA;AACAJ,sBAAUG,UAAV,EAAsBU,IAAtB,CAA2BJ,QAA3B;AACA,mBAAOE,MAAP;AACD;AACF;AACF,OAhBH;;AAAA;AAAA;AAAA;AAAA,QADK;;AAmBLG,YACE,CAACX,UAAD,EAAaM,QAAb,EAAuBJ,UAAU,EAAjC,KAAwC;AACtC,UAAK,OAAD,CAAUC,IAAV,CAAeH,UAAf,CAAJ,EAAgC;AAC9B,cAAM,IAAII,SAAJ,CAAc,iDAAd,CAAN;AACD;AACD,UAAI,CAACP,UAAUG,UAAV,CAAL,EAA4BH,UAAUG,UAAV,IAAwB,EAAxB;AAC5BN,UAAIE,IAAJ,CAAU,wCAAuCI,UAAW,EAA5D;AACAH,gBAAUG,UAAV,EAAsBU,IAAtB,CAA2BJ,QAA3B;AACA,aAAO,EAAEM,aAAanB,UAAUoB,cAAV,EAAf,EAAP;AACD,KA5BE;;AA8BLC;AAAA,oCACE,WAAOd,UAAP,EAAmBC,OAAnB,EAA4BC,OAA5B,EAAwC;AACtC;AACA,YAAIJ,cAAcE,UAAd,KAA6BF,cAAcE,UAAd,EAA0BK,MAA3D,EAAmE;AACjEP,wBAAcE,UAAd,EAA0Be,OAA1B,CAAkC,oBAAY;AAC5C,gBAAIT,QAAJ,EAAc;AACZZ,kBAAIE,IAAJ,CAAU,qCAAoCI,UAAW,EAAzD;AACA,qBAAOM,SAAS,EAAEG,SAASR,OAAX,EAAT,CAAP;AACD;AACF,WALD;AAMD;AACF,OAXH;;AAAA;AAAA;AAAA;AAAA,QA9BK;;AA2CLe,eACE,CAAChB,UAAD,EAAaM,QAAb,EAAuBJ,OAAvB,KAAmC;AACjC,UAAI,CAACJ,cAAcE,UAAd,CAAL,EAAgCF,cAAcE,UAAd,IAA4B,EAA5B;AAChCN,UAAIE,IAAJ,CAAU,wCAAuCI,UAAW,EAA5D;AACAF,oBAAcE,UAAd,EAA0BU,IAA1B,CAA+BJ,QAA/B;AACA,aAAO,EAAEM,aAAanB,UAAUoB,cAAV,EAAf,EAAP;AACD;AAjDE,GAAP;AAmDD;;AASDrB,YAAYD,iBAAZ,GAAgCA,iBAAhC;;AAEA0B,OAAOC,OAAP,GAAiB1B,WAAjB","file":"local.engine.js","sourcesContent":["/*\n * This engine simply calls the locally saved function reference.\n *\n * You set what function to call with listen or subscribe.  You call functions with send or publish.\n *\n * Useful for testing bunnyhop APIs\n */\nfunction LocalEngine (pluginAPI) {\n  const log = pluginAPI.getPluginLogger();\n  log.info('Using LocalEngine');\n\n  const listeners = {};\n  const subscriptions = {};\n\n  return {\n    send:\n      async (routingKey, message, options = {}) => {\n        if ((/[*#]/g).test(routingKey)) {\n          throw new TypeError('Routing key cannot contain * or # for \"send\".');\n        }\n        if (listeners[routingKey] && listeners[routingKey].length) {\n          // Take the first listener, to round robin them\n          const listenFn = listeners[routingKey].shift();\n          if (listenFn) {\n            log.info(`  [<] calling test listener for ${routingKey}`);\n            const result = listenFn({ content: message });\n            // place the first one at the end of the list and continue\n            listeners[routingKey].push(listenFn);\n            return result;\n          }\n        }\n      },\n\n    listen:\n      (routingKey, listenFn, options = {}) => {\n        if ((/[*#]/g).test(routingKey)) {\n          throw new TypeError('Routing key cannot contain * or # for \"listen\".');\n        }\n        if (!listeners[routingKey]) listeners[routingKey] = [];\n        log.info(`  [>] setting up a test listener for ${routingKey}`);\n        listeners[routingKey].push(listenFn);\n        return { consumerTag: pluginAPI.getServiceName() };\n      },\n\n    publish:\n      async (routingKey, message, options) => {\n        // When publishing, publish to ALL subscribers\n        if (subscriptions[routingKey] && subscriptions[routingKey].length) {\n          subscriptions[routingKey].forEach(listenFn => {\n            if (listenFn) {\n              log.info(`  [<] calling test subscriber for ${routingKey}`);\n              return listenFn({ content: message });\n            }\n          });\n        }\n      },\n\n    subscribe:\n      (routingKey, listenFn, options) => {\n        if (!subscriptions[routingKey]) subscriptions[routingKey] = [];\n        log.info(`[>] setting up a test subscriber for ${routingKey}`);\n        subscriptions[routingKey].push(listenFn);\n        return { consumerTag: pluginAPI.getServiceName() };\n      }\n  };\n}\n\nasync function ConnectionManager() {\n  return {\n    connection: null,\n    channel: null\n  }\n}\n\nLocalEngine.ConnectionManager = ConnectionManager;\n\nmodule.exports = LocalEngine;"]}
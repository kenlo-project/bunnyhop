{"version":3,"sources":["../../../src/lib/plugins/package.plugin.js"],"names":["_","require","jsonSerializer","packageOutgoingMessage","message","routingKey","dateIssued","Date","toISOString","data","type","packageIncomingMessage","get","isPrePackaged","Object","assign","content","dateProcessed","omit","incomingMiddleware","next","listenOrSubscribeFn","options","decoratedListenOrSubscribeFn","msg","outgoingMiddleware","module","exports","pluginAPI","log","getPluginLogger","serialization","getInitialOptions","info","TypeError","send","listen","publish","subscribe"],"mappings":";;AAAA;;;AAGA,MAAMA,IAAIC,QAAQ,QAAR,CAAV;;AAEA,MAAMC,iBAAiBD,QAAQ,uBAAR,CAAvB;;AAEA;;;;;;;;;AASA,SAASE,sBAAT,CAAiCC,OAAjC,EAA0CC,UAA1C,EAAsD;AACpD,SAAO;AACLC,gBAAa,IAAIC,IAAJ,EAAD,CAAaC,WAAb,EADP;AAELC,UAAML,OAFD;AAGLM,UAAML;AAHD,GAAP;AAKD;;AAED;;;;;;;AAOA,SAASM,sBAAT,CAAiCP,OAAjC,EAA0CC,UAA1C,EAAsD;AACpD;AACA,QAAMC,aAAaN,EAAEY,GAAF,CAAMR,OAAN,EAAe,oBAAf,CAAnB;AACA,QAAMS,gBACJb,EAAEY,GAAF,CAAMR,OAAN,EAAe,cAAf,KACAJ,EAAEY,GAAF,CAAMR,OAAN,EAAe,oBAAf,CADA,IAEAJ,EAAEY,GAAF,CAAMR,OAAN,EAAe,cAAf,EAA+BJ,EAAEY,GAAF,CAAMR,OAAN,EAAe,eAAf,CAA/B,CAHF,CAHoD,CAMe;;AAEnE;AACA,SAAOU,OAAOC,MAAP,CACL;AACEC,aAAS;AACPC,qBAAgB,IAAIV,IAAJ,EAAD,CAAaC,WAAb,EADR;AAEPC,YAAMI,gBAAgBT,QAAQY,OAAR,CAAgBP,IAAhC,GAAuCT,EAAEkB,IAAF,CAAOd,QAAQY,OAAf,EAAwB,CAAC,MAAD,EAAS,OAAT,CAAxB,CAFtC;AAGPN,YAAMV,EAAEY,GAAF,CAAMR,OAAN,EAAe,mBAAf,CAHC;AAIPE;AAJO;AADX,GADK,EASLN,EAAEkB,IAAF,CAAOd,OAAP,EAAgB,CAAC,SAAD,CAAhB,CATK,CAAP;AAWD;;AAED,SAASe,kBAAT,CAA6BC,IAA7B,EAAmC;AACjC,SAAO,CAACf,UAAD,EAAagB,mBAAb,EAAkCC,OAAlC,KAA8C;AACnD,aAASC,4BAAT,CAAuCC,GAAvC,EAA4C;AAC1C,aAAOH,oBAAoBV,uBAAuBa,GAAvB,EAA4BnB,UAA5B,CAApB,CAAP;AACD;AACD,WAAOe,KAAKf,UAAL,EAAiBkB,4BAAjB,EAA+CD,OAA/C,CAAP;AACD,GALD;AAMD;;AAED,SAASG,kBAAT,CAA6BL,IAA7B,EAAmC;AACjC,SAAO,CAACf,UAAD,EAAaD,OAAb,EAAsBkB,OAAtB,KACLF,KAAKf,UAAL,EAAiBF,uBAAuBC,OAAvB,EAAgCC,UAAhC,CAAjB,EAA8DiB,OAA9D,CADF;AAED;;AAED;;;AAGAI,OAAOC,OAAP,GAAiB,UAAUC,SAAV,EAAqB;AACpC,QAAMC,MAAMD,UAAUE,eAAV,EAAZ;AACA,QAAM,EAAEC,aAAF,KAAoBH,UAAUI,iBAAV,EAA1B;AACAH,MAAII,IAAJ,CAAS,uBAAT;AACA,MAAIF,kBAAkB7B,cAAtB,EAAsC;AACpC,UAAM,IAAIgC,SAAJ,CAAc,4DAAd,CAAN;AACD;;AAED,SAAO;AACLC,UAAMV,kBADD;AAELW,YAAQjB,kBAFH;AAGLkB,aAASZ,kBAHJ;AAILa,eAAWnB;AAJN,GAAP;AAMD,CAdD","file":"package.plugin.js","sourcesContent":["/**\n * Created by balmasi on 2017-06-05.\n */\nconst _ = require('lodash');\n\nconst jsonSerializer = require('../serialization/json');\n\n/**\n * Decorates outgoing messages with dateIssued, type and data\n * where data is the payload, dateIssued is the time we're sending the message, and\n * type is the routing key\n *\n * @param {object} message\n * @param {string} routingKey - where the message is going\n * @return {{dateIssued: string, data: object, type: string}}\n */\nfunction packageOutgoingMessage (message, routingKey) {\n  return {\n    dateIssued: (new Date()).toISOString(),\n    data: message,\n    type: routingKey\n  };\n}\n\n/**\n * Adds a date the event was observed by the listening system to the payload\n * This is useful for identifying and optimizing performance issueus\n * @param {object} message - the amqp message\n * @param {string} routingKey- the routingKey where the message is coming from\n * @return {object} - the amqp message with its content decorated\n */\nfunction packageIncomingMessage (message, routingKey) {\n  // Get the dateIssued in case it's already packaged on the other side\n  const dateIssued = _.get(message, 'content.dateIssued');\n  const isPrePackaged =\n    _.get(message, 'content.data') &&\n    _.get(message, 'content.dateIssued') &&\n    _.get(message, 'content.type', _.get(message, 'content._type')); // _type for backwards compat with 2.0.4\n\n  // Return a copy of the incoming message with the content modified\n  return Object.assign(\n    {\n      content: {\n        dateProcessed: (new Date()).toISOString(),\n        data: isPrePackaged ? message.content.data : _.omit(message.content, ['type', '_type']),\n        type: _.get(message, 'fields.routingKey'),\n        dateIssued\n      }\n    },\n    _.omit(message, ['content'])\n  );\n}\n\nfunction incomingMiddleware (next) {\n  return (routingKey, listenOrSubscribeFn, options) => {\n    function decoratedListenOrSubscribeFn (msg) {\n      return listenOrSubscribeFn(packageIncomingMessage(msg, routingKey));\n    }\n    return next(routingKey, decoratedListenOrSubscribeFn, options);\n  }\n}\n\nfunction outgoingMiddleware (next) {\n  return (routingKey, message, options) =>\n    next(routingKey, packageOutgoingMessage(message, routingKey), options);\n}\n\n/**\n * @return {Plugin}\n */\nmodule.exports = function (pluginAPI) {\n  const log = pluginAPI.getPluginLogger();\n  const { serialization } = pluginAPI.getInitialOptions();\n  log.info('Using Package Plugin.')\n  if (serialization !== jsonSerializer) {\n    throw new TypeError('Package plugin is only compatible with JSON serialization.');\n  }\n\n  return {\n    send: outgoingMiddleware,\n    listen: incomingMiddleware,\n    publish: outgoingMiddleware,\n    subscribe: incomingMiddleware\n  };\n};"]}
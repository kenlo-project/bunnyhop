{"version":3,"sources":["../../src/lib/connectionManager.js"],"names":["closable","close","err","log","warn","message","amqp","require","debug","ON_DEATH","info","module","exports","amqpUrl","options","connection","channel","connect","then","catch","Error","createChannel","signal","error"],"mappings":";;;+BAYA,WAAsBA,QAAtB,EAAgC;AAC9B,QAAI;AACF,YAAMA,SAASC,KAAT,EAAN;AACD,KAFD,CAEE,OAAOC,GAAP,EAAY;AACZC,UAAIC,IAAJ,CAAU,sCAAqCF,IAAIG,OAAQ,EAA3D;AACA;AACD;AACF,G;;kBAPcJ,K;;;;;AASf;;;;;;;;;;;AArBA;;;AAGA,MAAMK,OAAOC,QAAQ,SAAR,CAAb;AACA,MAAMC,QAAQD,QAAQ,OAAR,CAAd;AACA,MAAME,WAAWF,QAAQ,OAAR,CAAjB;;AAEA,MAAMJ,MAAM;AACVO,QAAMF,MAAM,eAAN,CADI;AAEVJ,QAAMI,MAAM,eAAN;AAFI,CAAZ;;AAqBAG,OAAOC,OAAP;AAAA,gCAAiB,WAAwBC,OAAxB,EAAiCC,OAAjC,EAA0C;AACzD,QAAIC,UAAJ;AACA,QAAIC,OAAJ;;AAEAD,iBAAa,MAAMT,KAAKW,OAAL,CAAaJ,OAAb,EAAsBC,OAAtB,EAChBI,IADgB,CACX,sBAAc;AAClBf,UAAIO,IAAJ,CAAU,6BAA4BG,OAAQ,qBAA9C;AACA,aAAOE,UAAP;AACD,KAJgB,EAKhBI,KALgB,CAKV,eAAO;AACZ,YAAM,IAAIC,KAAJ,CAAW,qCAAoCP,OAAQ,aAAYX,IAAIG,OAAQ,EAA/E,CAAN;AACD,KAPgB,CAAnB;;AASAW,cAAU,MAAMD,WAAWM,aAAX,GACbH,IADa,CACR,mBAAW;AACff,UAAIO,IAAJ,CAAU,oBAAV;AACA,aAAOM,OAAP;AACD,KAJa,EAKbG,KALa,CAKP,eAAO;AACZ,YAAM,IAAIC,KAAJ,CAAW,qCAAoClB,IAAIG,OAAQ,EAA3D,CAAN;AACD,KAPa,CAAhB;;AASAI,aAAS,UAAUa,MAAV,EAAkBC,KAAlB,EAAyB;AAChC,YAAMlB,UAAW,wCAAuCiB,SAAU,GAAEA,MAAO,SAAnB,GAA8B,OAAQ,GAA9F;AACAnB,UAAIO,IAAJ,CAASL,OAAT;AACA,UAAIW,OAAJ,EAAa;AACXf,cAAMe,OAAN;AACD;AACD,UAAID,UAAJ,EAAgB;AACdd,cAAMc,UAAN;AACD;AACF,KATD;;AAYA,WAAO;AACLA,gBADK;AAELC;AAFK,KAAP;AAID,GAtCD;;AAAA,WAAgCC,OAAhC;AAAA;AAAA;;AAAA,SAAgCA,OAAhC;AAAA","file":"connectionManager.js","sourcesContent":["/**\n * Created by balmasi on 2017-06-03.\n */\nconst amqp = require('amqplib');\nconst debug = require('debug');\nconst ON_DEATH = require('death');\n\nconst log = {\n  info: debug('bunnyhop:info'),\n  warn: debug('bunnyhop:warn')\n};\n\nasync function close (closable) {\n  try {\n    await closable.close();\n  } catch (err) {\n    log.warn(`Having trouble closing connection: ${err.message}`);\n    /* catch errors */\n  }\n}\n\n/**\n * Connection function to AMQP host\n *\n * @param {string} amqpUrl\n * @param {object} options\n * @return {Promise.<{connection: *, channel: *}>}\n */\nmodule.exports = async function connect (amqpUrl, options) {\n  let connection;\n  let channel;\n\n  connection = await amqp.connect(amqpUrl, options)\n    .then(connection => {\n      log.info(`Connected to amqp host on ${amqpUrl}. Creating channel.`);\n      return connection;\n    })\n    .catch(err => {\n      throw new Error(`Could not connect to AMQP host on ${amqpUrl}. Reason: ${err.message}`);\n    });\n\n  channel = await connection.createChannel()\n    .then(channel => {\n      log.info(`AMQP channel open.`);\n      return channel;\n    })\n    .catch(err => {\n      throw new Error(`Could not create channel. Reason: ${err.message}`);\n    });\n\n  ON_DEATH(function (signal, error) {\n    const message = `Stopping all AMQP connections due to ${signal ? `${signal} signal` : 'error'}.`;\n    log.info(message);\n    if (channel) {\n      close(channel);\n    }\n    if (connection) {\n      close(connection);\n    }\n  });\n\n\n  return {\n    connection,\n    channel\n  }\n};"]}